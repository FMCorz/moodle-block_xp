{"version":3,"file":"modal.min.js","sources":["../src/modal.js"],"sourcesContent":["// This file is part of Level Up XP.\n//\n// Level Up XP is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Level Up XP is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Level Up XP.  If not, see <https://www.gnu.org/licenses/>.\n//\n// https://levelup.plus\n\n/**\n * Modal.\n *\n * @module     block_xp/modal\n * @copyright  2025 Frédéric Massart\n * @author     Frédéric Massart <fred@branchup.tech>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalCancel from 'core/modal_cancel';\nimport * as Str from 'core/str';\nimport Templates from 'core/templates';\nimport * as Compat from 'block_xp/compat';\nimport * as RoleButton from 'block_xp/role-button';\nimport {extractNodeData, getDataFromJsonScript} from 'block_xp/utils';\n\nlet simpleOpenModalActionObserverRegistered = false;\nlet simpleOpenModalActionObserverSelector = '[data-xp-action=\"open-modal\"]';\n\n/**\n * Open the modal.\n *\n * @param {Node} node The node.\n */\nasync function openSimpleModal(node) {\n    const template = node.dataset.template;\n    const templateContext = getDataFromJsonScript(node.dataset.templateData ?? '');\n    const modalArgs = extractNodeData(node, 'modal');\n\n    // We only want to render our templates.\n    if (!template.startsWith('block_xp/') && !template.startsWith('local_xp/')) {\n        return;\n    }\n\n    let modalConfig = {\n        body: Templates.render(template, templateContext),\n        type: 'CANCEL',\n    };\n    if ('title' in modalArgs) {\n        modalConfig.title = modalArgs.title;\n    }\n    if ('large' in modalArgs) {\n        modalConfig.large = Boolean(modalConfig.large);\n    }\n\n    const modal = await Compat.createModal(modalConfig, ModalCancel);\n    modal.getRoot()[0].classList.add('block_xp');\n    modal.setButtonText('cancel', Str.get_string('closebuttontitle', 'core'));\n    modal.show();\n}\n\n/**\n * Open the modal from a selector.\n *\n * @param {String} selector\n */\nexport function openSimpleModalFromSelector(selector) {\n    const node = document.querySelector(selector);\n    if (!node) {\n        return;\n    }\n    openSimpleModal(node);\n}\n\n/**\n * Register simple open modal action observer.\n */\nexport function registerSimpleOpenModalActionObserver() {\n    if (simpleOpenModalActionObserverRegistered) {\n        return;\n    }\n    simpleOpenModalActionObserverRegistered = true;\n    RoleButton.delegateClick('body', simpleOpenModalActionObserverSelector, (node) => {\n        openSimpleModal(node);\n    });\n}\n"],"names":["selector","node","document","querySelector","openSimpleModal","simpleOpenModalActionObserverRegistered","RoleButton","delegateClick","template","dataset","templateContext","templateData","modalArgs","startsWith","modalConfig","body","Templates","render","type","title","large","Boolean","modal","Compat","createModal","ModalCancel","getRoot","classList","add","setButtonText","Str","get_string","show"],"mappings":";;;;;;;;2GAyE4CA,gBAClCC,KAAOC,SAASC,cAAcH,cAC/BC,YAGLG,gBAAgBH,oEAOZI,+CAGJA,yCAA0C,EAC1CC,WAAWC,cAAc,OAvDe,iCAuDiCN,OACrEG,gBAAgBH,uOAzDpBI,yCAA0C,iBAQ/BD,gBAAgBH,sCACrBO,SAAWP,KAAKQ,QAAQD,SACxBE,iBAAkB,8DAAsBT,KAAKQ,QAAQE,oEAAgB,IACrEC,WAAY,0BAAgBX,KAAM,aAGnCO,SAASK,WAAW,eAAiBL,SAASK,WAAW,wBAI1DC,YAAc,CACdC,KAAMC,mBAAUC,OAAOT,SAAUE,iBACjCQ,KAAM,UAEN,UAAWN,YACXE,YAAYK,MAAQP,UAAUO,OAE9B,UAAWP,YACXE,YAAYM,MAAQC,QAAQP,YAAYM,cAGtCE,YAAcC,OAAOC,YAAYV,YAAaW,uBACpDH,MAAMI,UAAU,GAAGC,UAAUC,IAAI,YACjCN,MAAMO,cAAc,SAAUC,IAAIC,WAAW,mBAAoB,SACjET,MAAMU"}