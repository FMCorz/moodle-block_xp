{"version":3,"file":"popup-notification-queue.min.js","sources":["../src/popup-notification-queue.js"],"sourcesContent":["// This file is part of Level Up XP.\n//\n// Level Up XP is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Level Up XP is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Level Up XP.  If not, see <https://www.gnu.org/licenses/>.\n//\n// https://levelup.plus\n\n/**\n * Notification popup queue.\n *\n * @copyright  2022 Frédéric Massart\n * @author     Frédéric Massart <fred@branchup.tech>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['block_xp/popup-notification', 'core/ajax'], function(PopupNotification, Ajax) {\n    let instances = [];\n    let isShowing = false;\n\n    /**\n     * Notify received new instance.\n     */\n    function notifyNewInstance() {\n        if (!isShowing) {\n            showNextInstance();\n        }\n    }\n\n    /**\n     * Show next instance.\n     */\n    function showNextInstance() {\n        if (!instances.length) {\n            return;\n        }\n        isShowing = true;\n        const instance = instances.splice(0, 1)[0];\n        PopupNotification.show(instance, {\n            onShown: () => {\n                Ajax.call([{\n                    methodname: 'block_xp_mark_popup_notification_seen',\n                    args: {\n                        courseid: instance.courseid,\n                        level: instance.levelnum\n                    }\n                }])[0].fail(function() {\n                    // Nothing.\n                });\n            },\n            onDismissed: () => {\n                isShowing = false;\n                setTimeout(() => showNextInstance(), 300);\n            },\n        });\n    }\n\n    /**\n     * Queue instances.\n     *\n     * @param {Object[]} additionalInstances The instances.\n     */\n    function queue(additionalInstances) {\n        instances = instances.concat(additionalInstances);\n        notifyNewInstance();\n    }\n\n    /**\n     * Queue from JSON node.\n     *\n     * @param {String} selector The JSON node selector.\n     */\n    const queueFromJson = (selector) => {\n        try {\n            const node = document.querySelector(selector);\n            const data = node ? JSON.parse(node.textContent) : null;\n            if (!Array.isArray(data)) {\n                throw new Error(\"That's a bit strange.\");\n            }\n            queue(data);\n        } catch (err) {\n            // Nothing.\n        }\n    };\n\n    return {\n        queue,\n        queueFromJson,\n    };\n});\n"],"names":["define","PopupNotification","Ajax","instances","isShowing","notifyNewInstance","showNextInstance","length","instance","splice","show","onShown","call","methodname","args","courseid","level","levelnum","fail","onDismissed","setTimeout","queue","additionalInstances","concat","queueFromJson","selector","node","document","querySelector","data","JSON","parse","textContent","Array","isArray","Error","err"],"mappings":";;;;;;;AAyBAA,2CAAO,CAAC,8BAA+B,cAAc,SAASC,kBAAmBC,UACzEC,UAAY,GACZC,WAAY,WAKPC,oBACAD,WACDE,4BAOCA,uBACAH,UAAUI,cAGfH,WAAY,QACNI,SAAWL,UAAUM,OAAO,EAAG,GAAG,GACxCR,kBAAkBS,KAAKF,SAAU,CAC7BG,QAAS,KACLT,KAAKU,KAAK,CAAC,CACPC,WAAY,wCACZC,KAAM,CACFC,SAAUP,SAASO,SACnBC,MAAOR,SAASS,aAEpB,GAAGC,MAAK,gBAIhBC,YAAa,KACTf,WAAY,EACZgB,YAAW,IAAMd,oBAAoB,iBAUxCe,MAAMC,qBACXnB,UAAYA,UAAUoB,OAAOD,qBAC7BjB,0BAqBG,CACHgB,MAAAA,MACAG,cAfmBC,qBAETC,KAAOC,SAASC,cAAcH,UAC9BI,KAAOH,KAAOI,KAAKC,MAAML,KAAKM,aAAe,SAC9CC,MAAMC,QAAQL,YACT,IAAIM,MAAM,yBAEpBd,MAAMQ,MACR,MAAOO"}