{"version":3,"file":"modal-form.min.js","sources":["../src/modal-form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Modal form.\n *\n * @module     block_xp/modal-form\n * @copyright  2024 Frédéric Massart\n * @author     Frédéric Massart <fred@branchup.tech>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalForm from 'core_form/modalform';\nimport * as Compat from 'block_xp/compat';\nimport * as RoleButton from 'block_xp/role-button';\n\nconst getButton = (modalForm, action) => {\n    const saveBtnJq = modalForm.modal.getFooter().find(modalForm.modal.getActionSelector(action));\n    return saveBtnJq.length ? saveBtnJq[0] : null;\n};\n\n/**\n * Open the modal.\n *\n * @param {Node} node The node.\n */\nfunction open(node) {\n    const formClass = node.dataset.formClass;\n    const formArgs = extractNodeData(node, 'formArgs');\n    const modalConfig = extractNodeData(node, 'modal');\n\n    const finalModalConfig = {\n        title: modalConfig.title ?? node.textContent.slice(0, 100),\n    };\n    if ('large' in modalConfig) {\n        finalModalConfig.large = Boolean(modalConfig.large);\n    }\n\n    var modalForm = new ModalForm({\n        formClass: formClass,\n        args: formArgs,\n        returnFocus: node,\n        saveButtonText: modalConfig.saveButtonText,\n        modalConfig: finalModalConfig\n    });\n    modalForm.addEventListener(modalForm.events.LOADED, () => {\n        const root = modalForm.modal.getRoot();\n        root.addClass('block_xp');\n\n        // Set the save button text.\n        const saveBtn = getButton(modalForm, 'save');\n        if (saveBtn && modalConfig.buttons?.save) {\n            if (modalConfig.buttons.save?.label) {\n                saveBtn.textContent = modalConfig.buttons.save?.label;\n            }\n            if (modalConfig.buttons.save?.danger) {\n                saveBtn.classList.remove('btn-primary');\n                saveBtn.classList.add('btn-danger');\n            }\n            if (modalConfig.buttons.save?.disabled) {\n                saveBtn.setAttribute('disabled', '');\n            }\n        }\n    });\n\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        e.preventDefault();\n\n        // We must mark the form as submitted because the core modalform sets it back\n        // to not having been sent, and we'll reload the page so when the form only\n        // has one field, this may be an issue.\n        Compat.markFormSubmitted(Compat.getFormNode(modalForm));\n\n        if (e.detail && e.detail.redirecturl) {\n            window.location.href = M.cfg.wwwroot + e.detail.redirecturl;\n        } else {\n            window.location.reload();\n        }\n\n        // We hide the modal after a little while in case we stayed on the page.\n        setTimeout(() => {\n            modalForm.modal.hide();\n        }, 1000);\n    });\n\n    modalForm.show();\n}\n\n/**\n * Delegate open.\n * @param {String} rootSelector The root selector.\n * @param {String} selector The selector.\n */\nexport function delegateOpen(rootSelector, selector) {\n    RoleButton.delegateClick(rootSelector, selector, (node) => {\n        open(node);\n    });\n}\n\n/**\n * Register open.\n * @param {String} selector The selector.\n */\nexport function registerOpen(selector) {\n    RoleButton.registerClick(selector, (node) => {\n        open(node);\n    });\n}\n\n/**\n * Extract data from dataset.\n *\n * This extracts data at a prefix, and converts in nested objects if needed.\n *\n * @param {Node} node The HTML node.\n * @param {String} prefix The data prefix.\n * @returns {Object}\n */\nexport function extractNodeData(node, prefix) {\n    return Object.keys(node.dataset).filter(k => k.indexOf(prefix) === 0).reduce((carry, k) => {\n        let value = node.dataset[k];\n        if (value === 'true' || value === 'false') {\n            value = value === 'true' ? true : false;\n        }\n        let key = k.charAt(prefix.length).toLocaleLowerCase() + k.substring(prefix.length + 1);\n\n        if (key.indexOf('__') > -1) {\n            return setAtDepth(carry, key.split('__'), value);\n        }\n\n        return {...carry, [key]: value};\n    }, {});\n}\n\n/**\n * Set a value at a specific depth in an object.\n *\n * @param {Object} obj\n * @param {String[]} keys\n * @param {Any} value\n * @returns {Object}\n */\nfunction setAtDepth(obj, keys, value) {\n    let currentObj = obj;\n\n    for (let i = 0; i < keys.length - 1; i++) {\n        const key = keys[i];\n        currentObj[key] = typeof currentObj[key] === 'undefined' ? {} : currentObj[key];\n        currentObj = currentObj[key];\n    }\n\n    const lastKey = keys[keys.length - 1];\n    currentObj[lastKey] = value;\n\n    return obj;\n}\n\nlet simpleOpenFormActionObserverRegistered = false;\nconst simpleOpenFormActionObserverSelector = '[data-xp-action=\"open-form\"][data-form-class]';\n\n/**\n * Register simple open form action observer.\n */\nexport function registerSimpleOpenFormActionObserver() {\n    if (simpleOpenFormActionObserverRegistered) {\n        return;\n    }\n    simpleOpenFormActionObserverRegistered = true;\n    document.body.addEventListener('click', (e) => {\n        const node = e.target.closest(simpleOpenFormActionObserverSelector);\n        if (!node) {\n            return;\n        }\n        e.preventDefault();\n        open(node);\n    });\n}\n"],"names":["rootSelector","selector","RoleButton","delegateClick","node","open","registerClick","simpleOpenFormActionObserverRegistered","document","body","addEventListener","e","target","closest","preventDefault","formClass","dataset","formArgs","extractNodeData","modalConfig","finalModalConfig","title","textContent","slice","large","Boolean","modalForm","ModalForm","args","returnFocus","saveButtonText","events","LOADED","modal","getRoot","addClass","saveBtn","action","saveBtnJq","getFooter","find","getActionSelector","length","getButton","buttons","_modalConfig$buttons","save","_modalConfig$buttons$","label","_modalConfig$buttons$2","_modalConfig$buttons$3","danger","classList","remove","add","_modalConfig$buttons$4","disabled","setAttribute","FORM_SUBMITTED","Compat","markFormSubmitted","getFormNode","detail","redirecturl","window","location","href","M","cfg","wwwroot","reload","setTimeout","hide","show","prefix","Object","keys","filter","k","indexOf","reduce","carry","value","key","charAt","toLocaleLowerCase","substring","obj","currentObj","i","lastKey","setAtDepth","split"],"mappings":";;;;;;;;mhCAyG6BA,aAAcC,UACvCC,WAAWC,cAAcH,aAAcC,UAAWG,OAC9CC,KAAKD,kFAQgBH,UACzBC,WAAWI,cAAcL,UAAWG,OAChCC,KAAKD,sEA2DLG,8CAGJA,wCAAyC,EACzCC,SAASC,KAAKC,iBAAiB,SAAUC,UAC/BP,KAAOO,EAAEC,OAAOC,QAXe,iDAYhCT,OAGLO,EAAEG,iBACFT,KAAKD,wKApJJC,KAAKD,mCACJW,UAAYX,KAAKY,QAAQD,UACzBE,SAAWC,gBAAgBd,KAAM,YACjCe,YAAcD,gBAAgBd,KAAM,SAEpCgB,iBAAmB,CACrBC,iCAAOF,YAAYE,uDAASjB,KAAKkB,YAAYC,MAAM,EAAG,MAEtD,UAAWJ,cACXC,iBAAiBI,MAAQC,QAAQN,YAAYK,YAG7CE,UAAY,IAAIC,mBAAU,CAC1BZ,UAAWA,UACXa,KAAMX,SACNY,YAAazB,KACb0B,eAAgBX,YAAYW,eAC5BX,YAAaC,mBAEjBM,UAAUhB,iBAAiBgB,UAAUK,OAAOC,QAAQ,8BACnCN,UAAUO,MAAMC,UACxBC,SAAS,kBAGRC,QAlCI,EAACV,UAAWW,gBACpBC,UAAYZ,UAAUO,MAAMM,YAAYC,KAAKd,UAAUO,MAAMQ,kBAAkBJ,gBAC9EC,UAAUI,OAASJ,UAAU,GAAK,MAgCrBK,CAAUjB,UAAW,WACjCU,sCAAWjB,YAAYyB,yCAAZC,qBAAqBC,KAAM,iIAClC3B,YAAYyB,QAAQE,uCAApBC,sBAA0BC,MAC1BZ,QAAQd,2CAAcH,YAAYyB,QAAQE,8CAApBG,uBAA0BD,qCAEhD7B,YAAYyB,QAAQE,wCAApBI,uBAA0BC,SAC1Bf,QAAQgB,UAAUC,OAAO,eACzBjB,QAAQgB,UAAUE,IAAI,8CAEtBnC,YAAYyB,QAAQE,wCAApBS,uBAA0BC,UAC1BpB,QAAQqB,aAAa,WAAY,QAK7C/B,UAAUhB,iBAAiBgB,UAAUK,OAAO2B,gBAAiB/C,IACzDA,EAAEG,iBAKF6C,OAAOC,kBAAkBD,OAAOE,YAAYnC,YAExCf,EAAEmD,QAAUnD,EAAEmD,OAAOC,YACrBC,OAAOC,SAASC,KAAOC,EAAEC,IAAIC,QAAU1D,EAAEmD,OAAOC,YAEhDC,OAAOC,SAASK,SAIpBC,YAAW,KACP7C,UAAUO,MAAMuC,SACjB,QAGP9C,UAAU+C,gBAiCEvD,gBAAgBd,KAAMsE,eAC3BC,OAAOC,KAAKxE,KAAKY,SAAS6D,QAAOC,GAA2B,IAAtBA,EAAEC,QAAQL,UAAeM,QAAO,CAACC,MAAOH,SAC7EI,MAAQ9E,KAAKY,QAAQ8D,GACX,SAAVI,OAA8B,UAAVA,QACpBA,MAAkB,SAAVA,WAERC,IAAML,EAAEM,OAAOV,OAAOhC,QAAQ2C,oBAAsBP,EAAEQ,UAAUZ,OAAOhC,OAAS,UAEhFyC,IAAIJ,QAAQ,OAAS,WAgBbQ,IAAKX,KAAMM,WACvBM,WAAaD,QAEZ,IAAIE,EAAI,EAAGA,EAAIb,KAAKlC,OAAS,EAAG+C,IAAK,OAChCN,IAAMP,KAAKa,GACjBD,WAAWL,UAAkC,IAApBK,WAAWL,KAAuB,GAAKK,WAAWL,KAC3EK,WAAaA,WAAWL,WAGtBO,QAAUd,KAAKA,KAAKlC,OAAS,UACnC8C,WAAWE,SAAWR,MAEfK,IA3BQI,CAAWV,MAAOE,IAAIS,MAAM,MAAOV,OAGvC,IAAID,OAAQE,KAAMD,SAC1B,QA0BH3E,wCAAyC"}