{"version":3,"file":"modal-form.min.js","sources":["../src/modal-form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Modal form.\n *\n * @module     block_xp/modal-form\n * @copyright  2024 Frédéric Massart\n * @author     Frédéric Massart <fred@branchup.tech>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalForm from 'core_form/modalform';\nimport * as Compat from 'block_xp/compat';\nimport * as RoleButton from 'block_xp/role-button';\n\n/**\n * Open the modal.\n *\n * @param {Node} node The node.\n */\nfunction open(node) {\n    const formClass = node.dataset.formClass;\n    const formArgs = extractNodeData(node, 'formArgs');\n    const modalConfig = extractNodeData(node, 'modal');\n\n    var modalForm = new ModalForm({\n        formClass: formClass,\n        args: formArgs,\n        returnFocus: node,\n        saveButtonText: modalConfig.saveButtonText,\n        modalConfig: {\n            title: modalConfig.title ?? node.textContent.slice(0, 100),\n        }\n    });\n    modalForm.addEventListener(modalForm.events.LOADED, () => {\n        const root = modalForm.modal.getRoot();\n        root.addClass('block_xp');\n    });\n\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        e.preventDefault();\n\n        // We must mark the form as submitted because the core modalform sets it back\n        // to not having been sent, and we'll reload the page so when the form only\n        // has one field, this may be an issue.\n        Compat.markFormSubmitted(Compat.getFormNode(modalForm));\n\n        if (e.detail && e.detail.redirecturl) {\n            window.location.href = M.cfg.wwwroot + e.detail.redirecturl;\n        } else {\n            window.location.reload();\n        }\n    });\n\n    modalForm.show();\n}\n\n/**\n * Delegate open.\n * @param {String} rootSelector The root selector.\n * @param {String} selector The selector.\n */\nexport function delegateOpen(rootSelector, selector) {\n    RoleButton.delegateClick(rootSelector, selector, (node) => {\n        open(node);\n    });\n}\n\n/**\n * Register open.\n * @param {String} selector The selector.\n */\nexport function registerOpen(selector) {\n    RoleButton.registerClick(selector, (node) => {\n        open(node);\n    });\n}\n\n/**\n * Extract data from dataset.\n *\n * This extracts data at a prefix, and converts in nested objects if needed.\n *\n * @param {Node} node The HTML node.\n * @param {String} prefix The data prefix.\n * @returns {Object}\n */\nfunction extractNodeData(node, prefix) {\n    return Object.keys(node.dataset).filter(k => k.indexOf(prefix) === 0).reduce((carry, k) => {\n        let value = node.dataset[k];\n        if (value === 'true' || value === 'false') {\n            value = value === 'true' ? true : false;\n        }\n        let key = k.charAt(prefix.length).toLocaleLowerCase() + k.substring(prefix.length + 1);\n\n        if (key.indexOf('__') > -1) {\n            let [parentKey, childKey] = key.split('__', 2);\n            if (parentKey) {\n                return {\n                    ...carry,\n                    [parentKey]: {\n                        ...carry[parentKey] || {},\n                        [childKey]: value\n                    }\n                };\n            }\n            key = childKey;\n        }\n\n        return {...carry, [key]: value};\n    }, {});\n}\n"],"names":["open","node","formClass","dataset","formArgs","extractNodeData","modalConfig","modalForm","ModalForm","args","returnFocus","saveButtonText","title","textContent","slice","addEventListener","events","LOADED","modal","getRoot","addClass","FORM_SUBMITTED","e","preventDefault","Compat","markFormSubmitted","getFormNode","detail","redirecturl","window","location","href","M","cfg","wwwroot","reload","show","prefix","Object","keys","filter","k","indexOf","reduce","carry","value","key","charAt","length","toLocaleLowerCase","substring","parentKey","childKey","split","rootSelector","selector","RoleButton","delegateClick","registerClick"],"mappings":";;;;;;;;q8BAiCSA,KAAKC,mCACJC,UAAYD,KAAKE,QAAQD,UACzBE,SAAWC,gBAAgBJ,KAAM,YACjCK,YAAcD,gBAAgBJ,KAAM,aAEtCM,UAAY,IAAIC,mBAAU,CAC1BN,UAAWA,UACXO,KAAML,SACNM,YAAaT,KACbU,eAAgBL,YAAYK,eAC5BL,YAAa,CACTM,iCAAON,YAAYM,uDAASX,KAAKY,YAAYC,MAAM,EAAG,QAG9DP,UAAUQ,iBAAiBR,UAAUS,OAAOC,QAAQ,KACnCV,UAAUW,MAAMC,UACxBC,SAAS,eAGlBb,UAAUQ,iBAAiBR,UAAUS,OAAOK,gBAAiBC,IACzDA,EAAEC,iBAKFC,OAAOC,kBAAkBD,OAAOE,YAAYnB,YAExCe,EAAEK,QAAUL,EAAEK,OAAOC,YACrBC,OAAOC,SAASC,KAAOC,EAAEC,IAAIC,QAAUZ,EAAEK,OAAOC,YAEhDC,OAAOC,SAASK,YAIxB5B,UAAU6B,gBAiCL/B,gBAAgBJ,KAAMoC,eACpBC,OAAOC,KAAKtC,KAAKE,SAASqC,QAAOC,GAA2B,IAAtBA,EAAEC,QAAQL,UAAeM,QAAO,CAACC,MAAOH,SAC7EI,MAAQ5C,KAAKE,QAAQsC,GACX,SAAVI,OAA8B,UAAVA,QACpBA,MAAkB,SAAVA,WAERC,IAAML,EAAEM,OAAOV,OAAOW,QAAQC,oBAAsBR,EAAES,UAAUb,OAAOW,OAAS,MAEhFF,IAAIJ,QAAQ,OAAS,EAAG,KACnBS,UAAWC,UAAYN,IAAIO,MAAM,KAAM,MACxCF,gBACO,IACAP,OACFO,WAAY,IACNP,MAAMO,YAAc,IACtBC,UAAWP,QAIxBC,IAAMM,eAGH,IAAIR,OAAQE,KAAMD,SAC1B,2FAhDsBS,aAAcC,UACvCC,WAAWC,cAAcH,aAAcC,UAAWtD,OAC9CD,KAAKC,yCAQgBsD,UACzBC,WAAWE,cAAcH,UAAWtD,OAChCD,KAAKC"}